Menu="Dashboard:3"
Title="IPMI Summary"
Cond="file_exists('/boot/config/plugins/ipmi/ipmidash')"
---
<link type="text/css" rel="stylesheet" href="/plugins/ipmi/css/ipmi.css">
<link type="text/css" rel="stylesheet" href="/plugins/ipmi/css/tablesorter.css">
<link type="text/css" rel="stylesheet" href="/plugins/ipmi/css/tablesorter-<?=($display['theme'] == 'white' || $display['theme'] == 'azure') ? 'white' : 'black';?>.css">
<style>
table.ipmi thead tr th{width:16.6%;padding-left:10px;}
table.ipmi tbody tr td{padding-left:10px;font-weight:bold;}
table.tablesorter tbody tr:nth-child(odd) {
    background-color: #<?=($display['theme'] == 'white' || $display['theme'] == 'azure') ? 'F0F0F0' : '202020';?>;
}
table.tablesorter tbody tr:nth-child(even) {
    background-color: #<?=($display['theme'] == 'white' || $display['theme'] == 'azure') ? 'e4e2e4' : '1b1d1b';?>;
}
</style>

<table class="tablesorter shift ipmi" id="tblIPMIDash">
<thead><tr><th>Status</th><th class="network sorter-ipv4Address">IP Address</th><th>Sensor</th><th>Reading</th></tr></thead>
<tbody></tbody>
</table>

<?if (floatval($var['version']) < 6.4):?>
    <script src="/plugins/ipmi/js/jquery.tablesorter.combined.min.js"></script>
<?endif;?>

<script>
$(function(){
    $('#tblIPMIDash').tablesorter({
        sortReset: true,
        sortRestart : true,
        sortInitialOrder: 'asc',
        widgets: ['saveSort']
    });

    sensorArray(false);
    setTimeout(sensorRefresh, 20000);

});

/* sensor refresh */
function sensorRefresh() {
  sensorArray(true);
   setTimeout(sensorRefresh, 20000);
};

/* load ipmi sensor table */
function sensorArray(Refresh){
    $.getJSON('/plugins/ipmi/include/ipmi_helpers.php', {action:'ipmidash'}, function(data) {
        $.each(data.Sensors, function (i, sensor) {
            var LowerNR = parseFloat(sensor.LowerNR);
            var LowerC  = parseFloat(sensor.LowerC);
            var LowerNC = parseFloat(sensor.LowerNC);
            var UpperNC = parseFloat(sensor.UpperNC);
            var UpperC  = parseFloat(sensor.UpperC);
            var UpperNR = parseFloat(sensor.UpperNR);
            var Color   = 'green';
            var Units   = '';

            // only process sensor if reading is valid
            if(sensor.Reading != 'N/A'){
                var Reading = parseFloat(sensor.Reading);
                if(sensor.Type == 'Voltage'){
                    Units += ' ';

                    // if voltage is less than lower non-critical
                    // or voltage is greater than upper non-critical show critical
                    if(Reading < LowerNC && Reading > UpperNC)
                        Color = 'orange';

                    // if voltage is less than lower critical
                    // or voltage is greater than upper critical show non-recoverable
                    if(Reading < LowerC || Reading > UpperC)
                        Color = 'red';

                }else if(sensor.Type == 'Fan'){
                    Units += ' ';

                    // if Fan RPMs are less than lower non-critical
                    if(Reading < LowerNC || Reading < LowerC || Reading < LowerNR)
                        Color = "red";

                }else if(sensor.Type == 'Temperature'){
                    Units += '&deg;';

                    // if temperature is greater than upper non-critical show critical
                    if(Reading > UpperNC)
                        Color = 'orange';

                    // if temperature is greater than upper critical show non-recoverable
                    if(Reading > UpperC)
                        Color = 'red';
                }
                Units += sensor.Units;
            }else {
                Color = 'blue'; // reading equals N/A
                if(sensor.Type == 'OEM Reserved'){
                    var Reading = sensor.Event;
                    if(Reading == 'Low')
                        Color = 'green';
                    if(Reading == 'Medium')
                        Color = 'orange';
                    if(Reading == 'High')
                        Color = 'red';
                }else{
                    var Reading = sensor.Reading;
                }
            }

            if(Refresh) {
                $('#'+i+' td.reading').html('<font color="'+ Color + '">'+ Reading + Units +'</font>');
            } else {
                Host = (typeof sensor.IP == 'undefined') ? '' : sensor.IP; // check for ip

            $('#tblIPMIDash tbody')
            .append("<tr id='"+i+"'>"+
            '<td title="'+sensor.State+'"><img src="/plugins/dynamix/images/'+ data.State[sensor.State] +'-on.png"/></td>'+ //state
            '<td class="network">'+Host+'</td>'+ // sensor host ip address
            '<td>'+sensor.Name+'</td>'+ //sensor name
            '<td class="reading">'+ '<font color="'+ Color + '">'+ Reading + Units +'</font></td>'+ //sensor reading
            '</tr>');
            }
        });
        if (!Refresh) {
            if(data.Network)
                $('.network').show();
            else
                $('.network').hide();

            // restore filters and update table for tablesorter
            var lastSearch = $('#tblIPMIDash')[0].config.lastSearch;
            $('#tblIPMIDash').trigger('update');
            $('#tblIPMIDash').trigger('search', [lastSearch]);
        }
    });
};

</script>